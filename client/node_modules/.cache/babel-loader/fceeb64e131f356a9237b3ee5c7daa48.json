{"ast":null,"code":"import { CREATE_NEW_USER_SUCCES, CREATE_NEW_USER_REQUEST, CREATE_NEW_USER_FAILURE } from './Types';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_FAILURE, USER_LOGIN_SUCCES } from './Types';\nexport const LogInUserRequest = () => {\n  return {\n    type: USER_LOGIN_REQUEST\n  };\n};\nexport const LogInUserSucces = users => {\n  return {\n    type: USER_LOGIN_SUCCES,\n    payload: users\n  };\n};\nexport const LogInUserFailure = error => {\n  return {\n    type: USER_LOGIN_FAILURE,\n    payload: error\n  };\n};\nexport const LogIn = body => {\n  return dispatch => {\n    dispatch(LogInUserRequest());\n    fetch('/user/LogIn', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(res => {\n      console.log(res);\n      return res.json();\n    }).then(json => {\n      console.log(json);\n      dispatch(LogInUserSucces(json));\n    }).then(localStorage.setItem('auth-token', data.token)).catch(error => {\n      console.log(error);\n      dispatch(LogInUserFailure(error.message));\n    });\n  };\n}; /////////////////////////////\n\nexport const fetchUserRequest = () => {\n  return {\n    type: CREATE_NEW_USER_REQUEST\n  };\n};\nexport const createUser = users => {\n  return {\n    type: CREATE_NEW_USER_SUCCES,\n    payload: users\n  };\n};\nexport const fetchUserFailure = error => {\n  return {\n    type: CREATE_NEW_USER_FAILURE,\n    payload: error\n  };\n};\nexport const CreateAccount = body => {\n  return dispatch => {\n    dispatch(fetchUserRequest());\n    fetch('user/SignUp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(json => {\n      dispatch(createUser(json));\n      console.log(json);\n    }).catch(error => {\n      dispatch(fetchUserFailure(error.message));\n    });\n  };\n};","map":{"version":3,"sources":["D:\\Projects\\My First React App\\client\\src\\redux\\actions\\authActions.js"],"names":["CREATE_NEW_USER_SUCCES","CREATE_NEW_USER_REQUEST","CREATE_NEW_USER_FAILURE","USER_LOGIN_REQUEST","USER_LOGIN_FAILURE","USER_LOGIN_SUCCES","LogInUserRequest","type","LogInUserSucces","users","payload","LogInUserFailure","error","LogIn","body","dispatch","fetch","method","headers","JSON","stringify","then","res","console","log","json","localStorage","setItem","data","token","catch","message","fetchUserRequest","createUser","fetchUserFailure","CreateAccount"],"mappings":"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","sourcesContent":["import { CREATE_NEW_USER_SUCCES, CREATE_NEW_USER_REQUEST, CREATE_NEW_USER_FAILURE } from './Types';\r\nimport { USER_LOGIN_REQUEST, USER_LOGIN_FAILURE, USER_LOGIN_SUCCES } from './Types';\r\n\r\nexport const LogInUserRequest = () => {\r\n\treturn {\r\n\t\ttype: USER_LOGIN_REQUEST\r\n\t};\r\n};\r\n\r\nexport const LogInUserSucces = (users) => {\r\n\treturn {\r\n\t\ttype: USER_LOGIN_SUCCES,\r\n\t\tpayload: users\r\n\t};\r\n};\r\n\r\nexport const LogInUserFailure = (error) => {\r\n\treturn {\r\n\t\ttype: USER_LOGIN_FAILURE,\r\n\t\tpayload: error\r\n\t};\r\n};\r\n\r\nexport const LogIn = (body) => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(LogInUserRequest());\r\n\t\tfetch('/user/LogIn', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(body)\r\n\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\treturn res.json();\r\n\t\t\t})\r\n\t\t\t.then((json) => {\r\n\t\t\t\tconsole.log(json);\r\n\t\t\t\tdispatch(LogInUserSucces(json));\r\n\t\t\t})\r\n\t\t\t.then(localStorage.setItem('auth-token', data.token))\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tdispatch(LogInUserFailure(error.message));\r\n\t\t\t});\r\n\t};\r\n};\r\n/////////////////////////////\r\n\r\nexport const fetchUserRequest = () => {\r\n\treturn {\r\n\t\ttype: CREATE_NEW_USER_REQUEST\r\n\t};\r\n};\r\n\r\nexport const createUser = (users) => {\r\n\treturn {\r\n\t\ttype: CREATE_NEW_USER_SUCCES,\r\n\t\tpayload: users\r\n\t};\r\n};\r\n\r\nexport const fetchUserFailure = (error) => {\r\n\treturn {\r\n\t\ttype: CREATE_NEW_USER_FAILURE,\r\n\t\tpayload: error\r\n\t};\r\n};\r\n\r\nexport const CreateAccount = (body) => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(fetchUserRequest());\r\n\t\tfetch('user/SignUp', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(body)\r\n\t\t})\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((json) => {\r\n\t\t\t\tdispatch(createUser(json));\r\n\t\t\t\tconsole.log(json);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tdispatch(fetchUserFailure(error.message));\r\n\t\t\t});\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}