{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\My First React App\\\\client\\\\src\\\\components\\\\MYtinerary.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCities } from \"../redux/actions/cityAction\";\n\nclass MYtinerary extends React.Component {\n  componentDidMount() {\n    this.props.getCities();\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"cities\"));\n  }\n\n  render() {\n    const cities = this.state.cities;\n    const citiesList = cities.length ? cities.map(city => {\n      return React.createElement(\"div\", {\n        key: city._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, city.name), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, city.country), React.createElement(\"img\", {\n        src: city.images,\n        alt: \"cityimages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }));\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"nothing\");\n    return {\n      citiesList\n    };\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(fetchCities())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MYtinerary);","map":{"version":3,"sources":["D:\\Projects\\My First React App\\client\\src\\components\\MYtinerary.js"],"names":["React","connect","fetchCities","MYtinerary","Component","componentDidMount","props","getCities","render","console","log","cities","state","citiesList","length","map","city","_id","name","country","images","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAGrCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,SAAX;AACH;;AACDC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ;AAKH;;AAIDE,EAAAA,MAAM,GAAG;AAAA,UACGG,MADH,GACc,KAAKC,KADnB,CACGD,MADH;AAEL,UAAME,UAAU,GAAGF,MAAM,CAACG,MAAP,GAAiBH,MAAM,CAACI,GAAP,CAAWC,IAAI,IAAI;AACnD,aACI;AAAK,QAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMD,IAAI,CAACE,IAAX,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMF,IAAI,CAACG,OAAX,CAFJ,EAGI;AAAK,QAAA,GAAG,EAAEH,IAAI,CAACI,MAAf;AAAuB,QAAA,GAAG,EAAC,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAQH,KATmC,CAAjB,GAUX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVR;AAaA,WAEI;AAAEP,MAAAA;AAAF,KAFJ;AAIH;;AApCoC;;AAsCzC,MAAMQ,eAAe,GAAIT,KAAD,IAAW;AAC/B,SAAO;AACHD,IAAAA,MAAM,EAAEC,KAAK,CAACD;AADX,GAAP;AAIH,CALD;;AAMA,MAAMW,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHhB,IAAAA,SAAS,EAAE,MAAMgB,QAAQ,CAACrB,WAAW,EAAZ;AADtB,GAAP;AAGH,CAJD;;AAKA,eAAeD,OAAO,CAACoB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CnB,UAA7C,CAAf","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { fetchCities } from \"../redux/actions/cityAction\"\r\n\r\nclass MYtinerary extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getCities()\r\n    }\r\n    render() {\r\n        console.log(this.props)\r\n        return (\r\n            <div >\r\n                <p>cities</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { cities } = this.state;\r\n        const citiesList = cities.length ? (cities.map(city => {\r\n            return (\r\n                <div key={city._id}>\r\n                    <div>{city.name}</div>\r\n                    <div>{city.country}</div>\r\n                    <img src={city.images} alt=\"cityimages\"></img>\r\n\r\n                </div>\r\n            )\r\n        })) : (\r\n                <div>nothing</div>\r\n            )\r\n\r\n        return (\r\n\r\n            { citiesList }\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cities: state.cities\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCities: () => dispatch(fetchCities())\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MYtinerary);\r\n"]},"metadata":{},"sourceType":"module"}