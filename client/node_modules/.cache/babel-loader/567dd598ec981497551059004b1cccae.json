{"ast":null,"code":"import _defineProperty from \"D:\\\\Projects\\\\My First React App\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_CITIES_FAILURE, FETCH_CITIES_REQUEST, FETCH_CITIES_SUCCES } from '../actions/cityTypes';\nconst initialState = {\n  loading: false,\n  cities: [],\n  error: ' '\n};\nconsole.log(this.initialState.cities);\n\nconst cityReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case FETCH_CITIES_SUCCES:\n      return _objectSpread({}, state, {\n        loading: false,\n        cities: action.payload,\n        error: ''\n      });\n\n    case FETCH_CITIES_FAILURE:\n      return _objectSpread({}, state, {\n        loading: false,\n        cities: [],\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cityReducer;","map":{"version":3,"sources":["D:\\Projects\\My First React App\\client\\src\\redux\\reducers\\cityReducer.js"],"names":["FETCH_CITIES_FAILURE","FETCH_CITIES_REQUEST","FETCH_CITIES_SUCCES","initialState","loading","cities","error","console","log","cityReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,oBAAT,EAA+BC,oBAA/B,EAAqDC,mBAArD,QAAgF,sBAAhF;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAKAC,OAAO,CAACC,GAAR,CAAY,KAAKL,YAAL,CAAkBE,MAA9B;;AAEA,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,oBAAL;AACI,+BACOS,KADP;AAEIN,QAAAA,OAAO,EAAE;AAFb;;AAKJ,SAAKF,mBAAL;AACI,+BACOQ,KADP;AAEIN,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,MAAM,EAAEM,MAAM,CAACE,OAHnB;AAIIP,QAAAA,KAAK,EAAE;AAJX;;AAMJ,SAAKN,oBAAL;AACI,+BACOU,KADP;AAEIN,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,MAAM,EAAE,EAHZ;AAIIC,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAJlB;;AAMJ;AACI,aAAOH,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import { FETCH_CITIES_FAILURE, FETCH_CITIES_REQUEST, FETCH_CITIES_SUCCES } from '../actions/cityTypes'\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    cities: [],\r\n    error: ' '\r\n}\r\nconsole.log(this.initialState.cities)\r\n\r\nconst cityReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_CITIES_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n\r\n            }\r\n        case FETCH_CITIES_SUCCES:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                cities: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_CITIES_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                cities: [],\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default cityReducer"]},"metadata":{},"sourceType":"module"}