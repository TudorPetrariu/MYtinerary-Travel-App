{"ast":null,"code":"import _defineProperty from \"D:\\\\Projects\\\\My First React App\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_SCHEMA_FAILURE, FETCH_SCHEMA_REQUEST, FETCH_SCHEMA_SUCCES } from '../actions/Types';\nconst initialState = {\n  loading: false,\n  schema: [],\n  error: ' '\n};\n\nconst schemaReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_SCHEMA_REQUEST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case FETCH_SCHEMA_SUCCES:\n      return _objectSpread({}, state, {\n        loading: false,\n        schema: action.payload,\n        error: ''\n      });\n\n    case FETCH_SCHEMA_FAILURE:\n      return _objectSpread({}, state, {\n        loading: false,\n        schema: [],\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default schemaReducer;","map":{"version":3,"sources":["D:\\Projects\\My First React App\\client\\src\\redux\\reducers\\schemaReducer.js"],"names":["FETCH_SCHEMA_FAILURE","FETCH_SCHEMA_REQUEST","FETCH_SCHEMA_SUCCES","initialState","loading","schema","error","schemaReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,oBAAT,EAA+BC,oBAA/B,EAAqDC,mBAArD,QAAgF,kBAAhF;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAGjBC,EAAAA,MAAM,EAAE,EAHS;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;;AAQA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,oBAAL;AACI,+BACOO,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb;;AAKJ,SAAKF,mBAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAHnB;AAIIL,QAAAA,KAAK,EAAE;AAJX;;AAMJ,SAAKN,oBAAL;AACI,+BACOQ,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,MAAM,EAAE,EAHZ;AAIIC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAJlB;;AAMJ;AACI,aAAOH,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,eAAeD,aAAf","sourcesContent":["import { FETCH_SCHEMA_FAILURE, FETCH_SCHEMA_REQUEST, FETCH_SCHEMA_SUCCES } from '../actions/Types'\r\nconst initialState = {\r\n    loading: false,\r\n\r\n    schema: [],\r\n    error: ' '\r\n}\r\n\r\n\r\nconst schemaReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_SCHEMA_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n\r\n            }\r\n        case FETCH_SCHEMA_SUCCES:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                schema: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_SCHEMA_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                schema: [],\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default schemaReducer"]},"metadata":{},"sourceType":"module"}